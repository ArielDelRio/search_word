{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","countCharacters","setcountCharacters","letterInputs","setletterInputs","words","setWords","input","React","createRef","handleCountCharactersChange","value","minLimit","maxLimit","getValidateCountCharacters","current","array","newDimensionValue","letterInputsWithNewDimension","length","concat","Array","fill","slice","handleSubmit","event","a","preventDefault","axios","get","params","wordsList","data","console","log","onSubmit","e","className","htmlFor","type","id","name","min","max","defaultValue","onBlur","target","ref","required","map","lInput","index","key","maxLength","onChange","newLettersInput","handleLetterInputChange","wordsGroup","word","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+QAiHeA,EA5GH,WAAO,IAAD,EAC8BC,mBAAS,GADvC,mBACTC,EADS,KACQC,EADR,OAEwBF,mBAAS,CAAC,GAAI,KAFtC,mBAETG,EAFS,KAEKC,EAFL,OAGUJ,mBAAS,IAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAQVC,EAAQC,IAAMC,YAYdC,EAA8B,SAACC,GACnCA,EAXiC,SAACA,EAAOC,EAAUC,GACnD,OAAOF,EAAQC,EAAWA,EAAWD,EAAQE,EAAWA,EAAWF,EAU3DG,CACNH,EAhBuB,EADA,IAsBzBJ,EAAMQ,QAAQJ,MAAQA,EACtBT,EAAmBS,GAEnB,IAhBuCK,EAAOC,EAgBxCC,GAhBwCD,EAkB5CN,IAlBqCK,EAiBrCb,GAhB+BgB,OAC7B,YAAIH,GAAOI,OAAO,IAAIC,MAAMJ,EAAoBD,EAAMG,QAAQG,KAAK,KACnEN,EAAMO,MAAM,EAAGN,GAkBnBb,EAAgBc,IASZM,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBD,EAAME,iBADa,kBAGOC,IAAMC,IAAN,UAjDlB,qCAiDkB,WAA2B,CACjDC,OAAQ,CACN3B,aAAcA,KALD,OAGX4B,EAHW,OAQjBzB,EAASyB,EAAUC,MARF,gDAUjBC,QAAQC,IAAR,wCAViB,yDAAH,sDAclB,OACE,oCACE,0BAAMC,SAAU,SAACC,GAAD,OAAOZ,EAAaY,KAClC,yBAAKC,UAAU,wCACb,2BAAOC,QAAQ,mBAAf,qCAGA,2BACEC,KAAK,SACLC,GAAG,kBACHC,KAAK,kBACLC,IA/DiB,EAgEjBC,IAjEiB,GAkEjBC,aAAc3C,EACd4C,OAAQ,SAACT,GAAD,OAAO1B,EAA4B0B,EAAEU,OAAOnC,QACpDoC,IAAKxC,EACLyC,UAAQ,KAGZ,yBAAKX,UAAU,wCACZlC,EAAa8C,KAAI,SAACC,EAAQC,GAAT,OAChB,2BACEC,IAAKD,EACLZ,KAAK,OACLc,UAAU,IACV1C,MAAOuC,EACPI,SAAU,SAAClB,GAAD,OA9CU,SAACzB,EAAOwC,GACtC,IAAMI,EAAe,YAAOpD,GAC5BoD,EAAgBJ,GAASxC,EACzBP,EAAgBmD,GA2CWC,CAAwBpB,EAAEU,OAAOnC,MAAOwC,UAI/D,2BAAOZ,KAAK,SAAS5B,MAAM,YAG7B,6BACE,4CACCN,EAAM4C,KAAI,SAACQ,GAAD,OACT,yBAAKL,IAAKK,EAAWtC,QAArB,WACWsC,EAAWtC,OACpB,4BACGsC,EAAWpD,MAAM4C,KAAI,SAACS,GAAD,OACpB,wBAAIN,IAAKM,GAAOA,cC3FZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.37088e45.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst URL = \"https://search-word.vercel.app/api\";\n\nconst App = () => {\n  const [countCharacters, setcountCharacters] = useState(2);\n  const [letterInputs, setletterInputs] = useState([\"\", \"\"]);\n  const [words, setWords] = useState([]);\n\n  const maxCountCharacters = 10;\n  const minCountCharacters = 2;\n\n  const input = React.createRef();\n\n  const getValidateCountCharacters = (value, minLimit, maxLimit) => {\n    return value < minLimit ? minLimit : value > maxLimit ? maxLimit : value;\n  };\n\n  const getLetterInputsWithnewDimension = (array, newDimensionValue) => {\n    return newDimensionValue > array.length\n      ? [...array].concat(new Array(newDimensionValue - array.length).fill(\"\"))\n      : array.slice(0, newDimensionValue);\n  };\n\n  const handleCountCharactersChange = (value) => {\n    value = getValidateCountCharacters(\n      value,\n      minCountCharacters,\n      maxCountCharacters\n    );\n\n    input.current.value = value;\n    setcountCharacters(value);\n\n    const letterInputsWithNewDimension = getLetterInputsWithnewDimension(\n      letterInputs,\n      value\n    );\n\n    setletterInputs(letterInputsWithNewDimension);\n  };\n\n  const handleLetterInputChange = (value, index) => {\n    const newLettersInput = [...letterInputs];\n    newLettersInput[index] = value;\n    setletterInputs(newLettersInput);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const wordsList = await axios.get(`${URL}/search`, {\n        params: {\n          letterInputs: letterInputs,\n        },\n      });\n      setWords(wordsList.data);\n    } catch (error) {\n      console.log(`Some error on request: ${error}`);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"form-section select-count-characters\">\n          <label htmlFor=\"countCharacters\">\n            Please input the characters count\n          </label>\n          <input\n            type=\"number\"\n            id=\"countCharacters\"\n            name=\"countCharacters\"\n            min={minCountCharacters}\n            max={maxCountCharacters}\n            defaultValue={countCharacters}\n            onBlur={(e) => handleCountCharactersChange(e.target.value)}\n            ref={input}\n            required\n          />\n        </div>\n        <div className=\"form-section select-count-characters\">\n          {letterInputs.map((lInput, index) => (\n            <input\n              key={index}\n              type=\"text\"\n              maxLength=\"1\"\n              value={lInput}\n              onChange={(e) => handleLetterInputChange(e.target.value, index)}\n            />\n          ))}\n        </div>\n        <input type=\"submit\" value=\"Enviar\" />\n      </form>\n\n      <div>\n        <h3>Words Found:</h3>\n        {words.map((wordsGroup) => (\n          <div key={wordsGroup.length}>\n            Length: {wordsGroup.length}\n            <ul>\n              {wordsGroup.words.map((word) => (\n                <li key={word}>{word}</li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}